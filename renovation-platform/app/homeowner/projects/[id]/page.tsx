"use client"

import { useState, useRef } from "react"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Badge } from "@/components/ui/badge"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Progress } from "@/components/ui/progress"
import { Separator } from "@/components/ui/separator"
import { format, parseISO } from "date-fns"
import { useToast } from "@/hooks/use-toast"
import {
  AlertCircle,
  ArrowLeft,
  Download,
  FileText,
  Hammer,
  Loader2,
  MessageSquare,
  Plus,
  Upload,
  User,
} from "lucide-react"

// Mock project data
const getProjectData = (id: string) => {
  // Generate materials cut sheets and safety data sheets based on materials
  const materialsCutSheets = [
    {
      id: "mat-1",
      name: "Kitchen Cabinets - KraftMaid Cut Sheet",
      uploadDate: "2025-02-20T00:00:00",
      size: "1.2 MB",
      type: "application/pdf",
      autoGenerated: true,
      material: "Kitchen Cabinets",
      uploadedBy: "system",
    },
    {
      id: "mat-2",
      name: "Quartz Countertops - Silestone Cut Sheet",
      uploadDate: "2025-02-20T00:00:00",
      size: "0.8 MB",
      type: "application/pdf",
      autoGenerated: true,
      material: "Quartz Countertops",
      uploadedBy: "system",
    },
    {
      id: "mat-3",
      name: "Backsplash Tile - Daltile Cut Sheet",
      uploadDate: "2025-02-20T00:00:00",
      size: "0.6 MB",
      type: "application/pdf",
      autoGenerated: true,
      material: "Backsplash Tile",
      uploadedBy: "system",
    },
    {
      id: "mat-4",
      name: "Sink & Faucet - Kohler Cut Sheet",
      uploadDate: "2025-02-20T00:00:00",
      size: "1.0 MB",
      type: "application/pdf",
      autoGenerated: true,
      material: "Sink & Faucet",
      uploadedBy: "system",
    },
  ]

  const safetyDataSheets = [
    {
      id: "sds-1",
      name: "Kitchen Cabinets - KraftMaid SDS",
      uploadDate: "2025-02-20T00:00:00",
      size: "0.9 MB",
      type: "application/pdf",
      autoGenerated: true,
      material: "Kitchen Cabinets",
      uploadedBy: "system",
    },
    {
      id: "sds-2",
      name: "Quartz Countertops - Silestone SDS",
      uploadDate: "2025-02-20T00:00:00",
      size: "1.1 MB",
      type: "application/pdf",
      autoGenerated: true,
      material: "Quartz Countertops",
      uploadedBy: "system",
    },
    {
      id: "sds-3",
      name: "Backsplash Tile - Daltile SDS",
      uploadDate: "2025-02-20T00:00:00",
      size: "0.7 MB",
      type: "application/pdf",
      autoGenerated: true,
      material: "Backsplash Tile",
      uploadedBy: "system",
    },
    {
      id: "sds-4",
      name: "Sink & Faucet - Kohler SDS",
      uploadDate: "2025-02-20T00:00:00",
      size: "0.8 MB",
      type: "application/pdf",
      autoGenerated: true,
      material: "Sink & Faucet",
      uploadedBy: "system",
    },
  ]

  // Contractor uploaded documents
  const inspectionReports = [
    {
      id: "insp-1",
      name: "Plumbing Inspection Report",
      uploadDate: "2025-03-12T00:00:00",
      size: "1.5 MB",
      type: "application/pdf",
      uploadedBy: "contractor",
    },
    {
      id: "insp-2",
      name: "Electrical Inspection Report",
      uploadDate: "2025-03-15T00:00:00",
      size: "1.2 MB",
      type: "application/pdf",
      uploadedBy: "contractor",
    },
  ]

  const complianceCertificates = [
    {
      id: "comp-1",
      name: "Plumbing Compliance Certificate",
      uploadDate: "2025-03-18T00:00:00",
      size: "0.8 MB",
      type: "application/pdf",
      uploadedBy: "contractor",
    },
  ]

  const contractorLicenses = [
    {
      id: "lic-1",
      name: "General Contractor License",
      uploadDate: "2025-02-10T00:00:00",
      size: "0.5 MB",
      type: "application/pdf",
      uploadedBy: "contractor",
    },
    {
      id: "lic-2",
      name: "Liability Insurance Certificate",
      uploadDate: "2025-02-10T00:00:00",
      size: "0.7 MB",
      type: "application/pdf",
      uploadedBy: "contractor",
    },
  ]

  const assessmentReports = [
    {
      id: "assess-1",
      name: "Pre-Construction Property Assessment",
      uploadDate: "2025-02-12T00:00:00",
      size: "2.1 MB",
      type: "application/pdf",
      uploadedBy: "contractor",
    },
  ]

  return {
    id,
    name: "Modern Kitchen Renovation",
    contractor: {
      name: "Elite Home Renovations",
      email: "contact@elitehomerenovations.com",
      phone: "(555) 987-6543",
      rating: 4.8,
    },
    status: "in-progress",
    progress: 45,
    startDate: "2025-02-15T00:00:00",
    estimatedEndDate: "2025-04-30T00:00:00",
    budget: {
      total: 35000,
      spent: 15750,
      remaining: 19250,
      breakdown: {
        materials: 9500,
        labor: 5000,
        permits: 750,
        other: 500,
      },
    },
    description:
      "Complete kitchen renovation including new cabinets, countertops, appliances, flooring, and lighting. The project includes demolition of existing kitchen, plumbing and electrical updates, and installation of new fixtures.",
    location: {
      address: "123 Maple Street, Springfield, IL 62704",
      propertyType: "Single-family home",
      squareFootage: 2200,
    },
    team: [
      { name: "Mike Johnson", role: "Project Manager", contact: "mike@example.com" },
      { name: "Lisa Chen", role: "Interior Designer", contact: "lisa@example.com" },
      { name: "Carlos Rodriguez", role: "Lead Carpenter", contact: "carlos@example.com" },
      { name: "Dave Wilson", role: "Electrician", contact: "dave@example.com" },
      { name: "Anna Kim", role: "Plumber", contact: "anna@example.com" },
    ],
    milestones: [
      { id: "m1", name: "Project Planning & Design", status: "completed", date: "2025-02-15T00:00:00" },
      { id: "m2", name: "Demolition", status: "completed", date: "2025-02-25T00:00:00" },
      { id: "m3", name: "Rough Plumbing & Electrical", status: "in-progress", date: "2025-03-10T00:00:00" },
      { id: "m4", name: "Cabinet Installation", status: "not-started", date: "2025-03-25T00:00:00" },
      { id: "m5", name: "Countertop Installation", status: "not-started", date: "2025-04-05T00:00:00" },
      { id: "m6", name: "Appliance Installation", status: "not-started", date: "2025-04-15T00:00:00" },
      { id: "m7", name: "Final Touches & Cleanup", status: "not-started", date: "2025-04-25T00:00:00" },
    ],
    payments: [
      { id: "p1", amount: 10500, status: "paid", date: "2025-02-10T00:00:00", description: "Initial deposit (30%)" },
      { id: "p2", amount: 8750, status: "paid", date: "2025-03-05T00:00:00", description: "Progress payment (25%)" },
      { id: "p3", amount: 8750, status: "pending", date: "2025-04-01T00:00:00", description: "Progress payment (25%)" },
      { id: "p4", amount: 7000, status: "not-paid", date: "2025-04-30T00:00:00", description: "Final payment (20%)" },
    ],
    materials: [
      { name: "Kitchen Cabinets", brand: "KraftMaid", quantity: "12 units", cost: 5200, status: "delivered" },
      { name: "Quartz Countertops", brand: "Silestone", quantity: "45 sq ft", cost: 3800, status: "ordered" },
      { name: "Hardwood Flooring", brand: "Bruce", quantity: "200 sq ft", cost: 1600, status: "not-ordered" },
      { name: "Backsplash Tile", brand: "Daltile", quantity: "30 sq ft", cost: 450, status: "delivered" },
      { name: "Sink & Faucet", brand: "Kohler", quantity: "1 set", cost: 650, status: "delivered" },
      { name: "Light Fixtures", brand: "Kichler", quantity: "5 units", cost: 800, status: "ordered" },
    ],
    documents: {
      blueprints: [],
      architectural: [],
      permits: [],
      zoning: [],
      licenses: contractorLicenses,
      assessments: assessmentReports,
      inspections: inspectionReports,
      compliance: complianceCertificates,
      materials: materialsCutSheets,
      safety: safetyDataSheets,
    },
    notes: [
      {
        id: "n1",
        date: "2025-02-16T00:00:00",
        author: "Mike Johnson",
        content: "Initial client meeting completed. Finalized design choices and timeline.",
      },
      {
        id: "n2",
        date: "2025-02-26T00:00:00",
        author: "Carlos Rodriguez",
        content: "Demolition completed. Found some water damage behind the sink that will need additional work.",
      },
      {
        id: "n3",
        date: "2025-03-05T00:00:00",
        author: "Dave Wilson",
        content: "Electrical rough-in started. Need to upgrade electrical panel to accommodate new appliances.",
      },
    ],
  }
}

// Document type definitions for homeowner
const documentTypes = {
  blueprints: {
    title: "Blueprints",
    description: "Floor plans and detailed measurements (homeowner responsibility)",
    required: true,
    autoGenerated: false,
    uploadedBy: "homeowner",
  },
  architectural: {
    title: "Architectural Drawings",
    description: "Detailed architectural designs and renderings (homeowner responsibility)",
    required: true,
    autoGenerated: false,
    uploadedBy: "homeowner",
  },
  permits: {
    title: "Building Permits",
    description: "Official building permits from local authorities",
    required: true,
    autoGenerated: false,
    uploadedBy: "homeowner",
  },
  zoning: {
    title: "Zoning Approvals",
    description: "Zoning compliance documents and approvals",
    required: true,
    autoGenerated: false,
    uploadedBy: "homeowner",
  },
  licenses: {
    title: "Contractor Licensing & Insurance",
    description: "Business licenses, contractor certifications, liability insurance, and workers' compensation",
    required: true,
    autoGenerated: false,
    uploadedBy: "contractor",
    readOnly: true,
  },
  assessments: {
    title: "Pre-Construction Assessments",
    description: "Property condition reports, environmental assessments, and structural evaluations",
    required: true,
    autoGenerated: false,
    uploadedBy: "contractor",
    readOnly: true,
  },
  inspections: {
    title: "Ongoing Inspection Reports",
    description: "Progress inspections, code compliance checks, and quality control reports",
    required: true,
    autoGenerated: false,
    uploadedBy: "contractor",
    readOnly: true,
  },
  compliance: {
    title: "Final Inspection & Compliance Certificates",
    description: "Final building inspections, occupancy permits, and warranty documentation",
    required: true,
    autoGenerated: false,
    uploadedBy: "contractor",
    readOnly: true,
  },
  materials: {
    title: "Materials Cut Sheets",
    description: "Product specifications, installation instructions, and warranty information",
    required: false,
    autoGenerated: true,
    uploadedBy: "system",
    readOnly: true,
  },
  safety: {
    title: "Safety Data Sheets",
    description: "Material safety information, handling instructions, and emergency procedures",
    required: false,
    autoGenerated: true,
    uploadedBy: "system",
    readOnly: true,
  },
}

// Status colors
const statusColors = {
  completed: "bg-green-500",
  "in-progress": "bg-blue-500",
  "not-started": "bg-gray-500",
  delayed: "bg-amber-500",
  paid: "bg-green-500",
  pending: "bg-blue-500",
  "not-paid": "bg-gray-500",
  delivered: "bg-green-500",
  ordered: "bg-blue-500",
  "not-ordered": "bg-gray-500",
}

export default function HomeownerProjectDetailsPage({ params }: { params: { id: string } }) {
  const router = useRouter()
  const { toast } = useToast()
  const [project, setProject] = useState(getProjectData(params.id))
  const [isMessageDialogOpen, setIsMessageDialogOpen] = useState(false)
  const [isDocumentDialogOpen, setIsDocumentDialogOpen] = useState(false)
  const [selectedDocType, setSelectedDocType] = useState<string | null>(null)
  const [message, setMessage] = useState("")
  const [isUploading, setIsUploading] = useState(false)
  const fileInputRef = useRef<HTMLInputElement>(null)

  // Format date
  const formatDate = (dateString: string) => {
    return format(parseISO(dateString), "MMM d, yyyy")
  }

  // Format currency
  const formatCurrency = (amount: number) => {
    return `$${amount.toLocaleString(undefined, {
      minimumFractionDigits: 2,
      maximumFractionDigits: 2,
    })}`
  }

  // Handle message send
  const handleSendMessage = () => {
    if (!message.trim()) {
      toast({
        title: "Empty Message",
        description: "Please enter a message to send.",
        variant: "destructive",
      })
      return
    }

    // In a real app, this would send the message to the contractor
    toast({
      title: "Message Sent",
      description: "Your message has been sent to the contractor.",
    })
    setMessage("")
    setIsMessageDialogOpen(false)
  }

  // Handle document upload
  const handleDocumentUpload = () => {
    if (!selectedDocType) return

    setIsUploading(true)

    // Simulate upload delay
    setTimeout(() => {
      setIsUploading(false)

      // In a real app, this would upload the file to storage
      setProject((prev) => ({
        ...prev,
        documents: {
          ...prev.documents,
          [selectedDocType]: [
            ...prev.documents[selectedDocType as keyof typeof prev.documents],
            {
              id: `doc-${Date.now()}`,
              name: `${documentTypes[selectedDocType as keyof typeof documentTypes].title} - ${format(new Date(), "yyyy-MM-dd")}`,
              uploadDate: new Date().toISOString(),
              size: "2.4 MB",
              type: "application/pdf",
              uploadedBy: "homeowner",
            },
          ],
        },
      }))

      toast({
        title: "Document Uploaded",
        description: `${documentTypes[selectedDocType as keyof typeof documentTypes].title} has been uploaded successfully.`,
      })

      setSelectedDocType(null)
      setIsDocumentDialogOpen(false)
    }, 2000)
  }

  // Handle file selection
  const handleFileSelect = () => {
    fileInputRef.current?.click()
  }

  // Get document count
  const getDocumentCount = () => {
    let count = 0
    Object.keys(project.documents).forEach((key) => {
      count += project.documents[key as keyof typeof project.documents].length
    })
    return count
  }

  // Get missing required documents that homeowner needs to upload
  const getMissingRequiredDocuments = () => {
    const missing: string[] = []

    Object.entries(documentTypes).forEach(([key, value]) => {
      if (
        value.required &&
        !value.autoGenerated &&
        value.uploadedBy === "homeowner" &&
        project.documents[key as keyof typeof project.documents].length === 0
      ) {
        missing.push(value.title)
      }
    })

    return missing
  }

  // Get homeowner uploadable document types
  const getHomeownerDocumentTypes = () => {
    return Object.entries(documentTypes)
      .filter(([_, value]) => value.uploadedBy === "homeowner" && !value.autoGenerated)
      .map(([key, value]) => ({ key, value }))
  }

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div className="flex items-center gap-2">
          <Button variant="ghost" size="icon" onClick={() => router.back()}>
            <ArrowLeft className="h-5 w-5" />
          </Button>
          <div>
            <h1 className="text-3xl font-bold tracking-tight">{project.name}</h1>
            <p className="text-muted-foreground">Project ID: {project.id}</p>
          </div>
        </div>
        <div className="flex flex-wrap gap-2">
          <Dialog open={isMessageDialogOpen} onOpenChange={setIsMessageDialogOpen}>
            <DialogTrigger asChild>
              <Button>
                <MessageSquare className="mr-2 h-4 w-4" /> Message Contractor
              </Button>
            </DialogTrigger>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>Send Message to Contractor</DialogTitle>
                <DialogDescription>
                  Send a message to {project.contractor.name} regarding this project.
                </DialogDescription>
              </DialogHeader>
              <div className="grid gap-4 py-4">
                <div className="grid gap-2">
                  <Label htmlFor="message">Message</Label>
                  <Textarea
                    id="message"
                    value={message}
                    onChange={(e) => setMessage(e.target.value)}
                    placeholder="Type your message here..."
                    rows={5}
                  />
                </div>
              </div>
              <DialogFooter>
                <Button variant="outline" onClick={() => setIsMessageDialogOpen(false)}>
                  Cancel
                </Button>
                <Button onClick={handleSendMessage}>Send Message</Button>
              </DialogFooter>
            </DialogContent>
          </Dialog>
        </div>
      </div>

      <div className="grid gap-6 md:grid-cols-3">
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">Project Status</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex items-center gap-2">
              <Badge className={`${statusColors[project.status]} text-white`}>
                {project.status === "in-progress"
                  ? "In Progress"
                  : project.status === "not-started"
                    ? "Not Started"
                    : project.status.charAt(0).toUpperCase() + project.status.slice(1)}
              </Badge>
              <span className="text-sm text-muted-foreground">{project.progress}% Complete</span>
            </div>
            <Progress value={project.progress} className="mt-2" />
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">Timeline</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex flex-col gap-1">
              <div className="flex justify-between">
                <span className="text-sm text-muted-foreground">Start Date</span>
                <span className="text-sm font-medium">{formatDate(project.startDate)}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-sm text-muted-foreground">Estimated Completion</span>
                <span className="text-sm font-medium">{formatDate(project.estimatedEndDate)}</span>
              </div>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">Budget</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex flex-col gap-1">
              <div className="flex justify-between">
                <span className="text-sm text-muted-foreground">Total Budget</span>
                <span className="text-sm font-medium">{formatCurrency(project.budget.total)}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-sm text-muted-foreground">Spent</span>
                <span className="text-sm font-medium">{formatCurrency(project.budget.spent)}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-sm text-muted-foreground">Remaining</span>
                <span className="text-sm font-medium">{formatCurrency(project.budget.remaining)}</span>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      <Tabs defaultValue="overview" className="w-full">
        <TabsList className="grid grid-cols-2 md:grid-cols-6 w-full">
          <TabsTrigger value="overview">Overview</TabsTrigger>
          <TabsTrigger value="milestones">Milestones</TabsTrigger>
          <TabsTrigger value="payments">Payments</TabsTrigger>
          <TabsTrigger value="materials">Materials</TabsTrigger>
          <TabsTrigger value="documents">Documents</TabsTrigger>
          <TabsTrigger value="notes">Notes</TabsTrigger>
        </TabsList>

        <TabsContent value="overview" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Project Details</CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div>
                <h3 className="text-lg font-medium mb-2">Description</h3>
                <p className="text-sm text-muted-foreground">{project.description}</p>
              </div>

              <div>
                <h3 className="text-lg font-medium mb-2">Location</h3>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div>
                    <p className="text-sm font-medium">Address</p>
                    <p className="text-sm text-muted-foreground">{project.location.address}</p>
                  </div>
                  <div>
                    <p className="text-sm font-medium">Property Type</p>
                    <p className="text-sm text-muted-foreground">{project.location.propertyType}</p>
                  </div>
                  <div>
                    <p className="text-sm font-medium">Square Footage</p>
                    <p className="text-sm text-muted-foreground">{project.location.squareFootage} sq ft</p>
                  </div>
                </div>
              </div>

              <div>
                <h3 className="text-lg font-medium mb-2">Contractor Information</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <p className="text-sm font-medium">Name</p>
                    <p className="text-sm text-muted-foreground">{project.contractor.name}</p>
                  </div>
                  <div>
                    <p className="text-sm font-medium">Contact</p>
                    <p className="text-sm text-muted-foreground">{project.contractor.email}</p>
                    <p className="text-sm text-muted-foreground">{project.contractor.phone}</p>
                  </div>
                </div>
              </div>

              <div>
                <h3 className="text-lg font-medium mb-2">Project Team</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {project.team.map((member, index) => (
                    <div key={index} className="flex items-start gap-2">
                      <div className="h-8 w-8 rounded-full bg-primary flex items-center justify-center text-primary-foreground">
                        {member.name.charAt(0)}
                      </div>
                      <div>
                        <p className="text-sm font-medium">{member.name}</p>
                        <p className="text-xs text-muted-foreground">{member.role}</p>
                        <p className="text-xs text-muted-foreground">{member.contact}</p>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              <div>
                <h3 className="text-lg font-medium mb-2">Budget Breakdown</h3>
                <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                  <div>
                    <p className="text-sm font-medium">Materials</p>
                    <p className="text-sm text-muted-foreground">
                      {formatCurrency(project.budget.breakdown.materials)}
                    </p>
                  </div>
                  <div>
                    <p className="text-sm font-medium">Labor</p>
                    <p className="text-sm text-muted-foreground">{formatCurrency(project.budget.breakdown.labor)}</p>
                  </div>
                  <div>
                    <p className="text-sm font-medium">Permits</p>
                    <p className="text-sm text-muted-foreground">{formatCurrency(project.budget.breakdown.permits)}</p>
                  </div>
                  <div>
                    <p className="text-sm font-medium">Other</p>
                    <p className="text-sm text-muted-foreground">{formatCurrency(project.budget.breakdown.other)}</p>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="milestones" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Project Milestones</CardTitle>
              <CardDescription>Track the progress of key project milestones</CardDescription>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Milestone</TableHead>
                    <TableHead>Target Date</TableHead>
                    <TableHead>Status</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {project.milestones.map((milestone) => (
                    <TableRow key={milestone.id}>
                      <TableCell className="font-medium">{milestone.name}</TableCell>
                      <TableCell>{formatDate(milestone.date)}</TableCell>
                      <TableCell>
                        <Badge className={`${statusColors[milestone.status]} text-white`}>
                          {milestone.status === "in-progress"
                            ? "In Progress"
                            : milestone.status === "not-started"
                              ? "Not Started"
                              : milestone.status.charAt(0).toUpperCase() + milestone.status.slice(1)}
                        </Badge>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="payments" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Payment Schedule</CardTitle>
              <CardDescription>Track payments for this project</CardDescription>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Description</TableHead>
                    <TableHead>Amount</TableHead>
                    <TableHead>Due Date</TableHead>
                    <TableHead>Status</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {project.payments.map((payment) => (
                    <TableRow key={payment.id}>
                      <TableCell className="font-medium">{payment.description}</TableCell>
                      <TableCell>{formatCurrency(payment.amount)}</TableCell>
                      <TableCell>{formatDate(payment.date)}</TableCell>
                      <TableCell>
                        <Badge className={`${statusColors[payment.status]} text-white`}>
                          {payment.status === "not-paid"
                            ? "Not Paid"
                            : payment.status.charAt(0).toUpperCase() + payment.status.slice(1)}
                        </Badge>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="materials" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Materials List</CardTitle>
              <CardDescription>Track materials for this project</CardDescription>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Material</TableHead>
                    <TableHead>Brand/Supplier</TableHead>
                    <TableHead>Quantity</TableHead>
                    <TableHead>Cost</TableHead>
                    <TableHead>Status</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {project.materials.map((material, index) => (
                    <TableRow key={index}>
                      <TableCell className="font-medium">{material.name}</TableCell>
                      <TableCell>{material.brand}</TableCell>
                      <TableCell>{material.quantity}</TableCell>
                      <TableCell>{formatCurrency(material.cost)}</TableCell>
                      <TableCell>
                        <Badge className={`${statusColors[material.status]} text-white`}>
                          {material.status === "not-ordered"
                            ? "Not Ordered"
                            : material.status.charAt(0).toUpperCase() + material.status.slice(1)}
                        </Badge>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="documents" className="space-y-6">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <div>
                <CardTitle>Project Documents</CardTitle>
                <CardDescription>Manage all project-related documents</CardDescription>
              </div>
              <Dialog open={isDocumentDialogOpen} onOpenChange={setIsDocumentDialogOpen}>
                <DialogTrigger asChild>
                  <Button>
                    <Upload className="mr-2 h-4 w-4" /> Upload Document
                  </Button>
                </DialogTrigger>
                <DialogContent>
                  <DialogHeader>
                    <DialogTitle>Upload Project Document</DialogTitle>
                    <DialogDescription>Select a document type and upload the relevant file.</DialogDescription>
                  </DialogHeader>
                  <div className="grid gap-4 py-4">
                    <div className="grid gap-2">
                      <Label htmlFor="docType">Document Type</Label>
                      <Select value={selectedDocType || ""} onValueChange={setSelectedDocType}>
                        <SelectTrigger>
                          <SelectValue placeholder="Select document type" />
                        </SelectTrigger>
                        <SelectContent>
                          {getHomeownerDocumentTypes().map(({ key, value }) => (
                            <SelectItem key={key} value={key}>
                              {value.title}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>

                    {selectedDocType && (
                      <div className="grid gap-2">
                        <Label>Description</Label>
                        <p className="text-sm text-muted-foreground">
                          {documentTypes[selectedDocType as keyof typeof documentTypes].description}
                        </p>
                      </div>
                    )}

                    <div className="grid gap-2">
                      <Label>File</Label>
                      <div
                        className="border-2 border-dashed rounded-md p-6 flex flex-col items-center justify-center cursor-pointer hover:border-primary"
                        onClick={handleFileSelect}
                      >
                        <input
                          type="file"
                          ref={fileInputRef}
                          className="hidden"
                          accept=".pdf,.doc,.docx,.jpg,.jpeg,.png"
                        />
                        <Upload className="h-8 w-8 text-muted-foreground mb-2" />
                        <p className="text-sm font-medium">Click to upload or drag and drop</p>
                        <p className="text-xs text-muted-foreground">PDF, DOC, DOCX, JPG, JPEG, PNG (max 10MB)</p>
                      </div>
                    </div>
                  </div>
                  <DialogFooter>
                    <Button variant="outline" onClick={() => setIsDocumentDialogOpen(false)}>
                      Cancel
                    </Button>
                    <Button onClick={handleDocumentUpload} disabled={!selectedDocType || isUploading}>
                      {isUploading ? (
                        <>
                          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                          Uploading...
                        </>
                      ) : (
                        <>Upload Document</>
                      )}
                    </Button>
                  </DialogFooter>
                </DialogContent>
              </Dialog>
            </CardHeader>
            <CardContent>
              {getDocumentCount() === 0 ? (
                <div className="flex flex-col items-center justify-center py-8 text-center">
                  <FileText className="h-12 w-12 text-muted-foreground mb-4" />
                  <h3 className="text-lg font-medium">No Documents Uploaded</h3>
                  <p className="text-sm text-muted-foreground max-w-md mt-1 mb-4">
                    Upload project documents to keep track of important files and share them with your contractor.
                  </p>

                  {getMissingRequiredDocuments().length > 0 && (
                    <div className="bg-amber-50 border border-amber-200 rounded-md p-4 mt-2 w-full max-w-md">
                      <div className="flex items-start">
                        <AlertCircle className="h-5 w-5 text-amber-500 mr-2 mt-0.5" />
                        <div>
                          <h4 className="text-sm font-medium text-amber-800">Required Documents Missing</h4>
                          <ul className="text-xs text-amber-700 mt-1 list-disc list-inside">
                            {getMissingRequiredDocuments().map((doc, index) => (
                              <li key={index}>{doc}</li>
                            ))}
                          </ul>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              ) : (
                <div className="space-y-6">
                  <div className="mb-6">
                    <h3 className="text-lg font-medium mb-2">Your Documents</h3>
                    <p className="text-sm text-muted-foreground mb-4">
                      Documents you need to upload for this project (including blueprints and architectural drawings)
                    </p>

                    <div className="grid grid-cols-1 gap-6">
                      {Object.entries(documentTypes)
                        .filter(([_, value]) => value.uploadedBy === "homeowner")
                        .map(([key, value]) => {
                          const docs = project.documents[key as keyof typeof project.documents]
                          return (
                            <div key={key}>
                              <h4 className="text-md font-medium mb-2 flex items-center">
                                {value.title}
                                {value.required && docs.length === 0 && (
                                  <Badge variant="outline" className="ml-2 text-amber-500 border-amber-500">
                                    Required
                                  </Badge>
                                )}
                              </h4>

                              {docs.length === 0 ? (
                                <div className="text-sm text-muted-foreground mb-4">No documents uploaded yet.</div>
                              ) : (
                                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                                  {docs.map((doc: any) => (
                                    <Card key={doc.id} className="flex flex-col">
                                      <CardHeader className="pb-2">
                                        <CardTitle className="text-sm font-medium">{doc.name}</CardTitle>
                                        <CardDescription>
                                          Uploaded on {formatDate(doc.uploadDate)} • {doc.size}
                                        </CardDescription>
                                      </CardHeader>
                                      <CardContent className="flex-grow">
                                        <div className="flex items-center justify-between">
                                          <Badge variant="outline">{doc.type}</Badge>
                                          <Button variant="ghost" size="icon">
                                            <Download className="h-4 w-4" />
                                          </Button>
                                        </div>
                                      </CardContent>
                                    </Card>
                                  ))}
                                </div>
                              )}
                            </div>
                          )
                        })}
                    </div>
                  </div>

                  <Separator />

                  <div className="mt-6">
                    <h3 className="text-lg font-medium mb-2">Contractor Documents</h3>
                    <p className="text-sm text-muted-foreground mb-4">Documents provided by your contractor</p>

                    <div className="grid grid-cols-1 gap-6">
                      {Object.entries(documentTypes)
                        .filter(([_, value]) => value.uploadedBy === "contractor" || value.uploadedBy === "system")
                        .map(([key, value]) => {
                          const docs = project.documents[key as keyof typeof project.documents]
                          if (docs.length === 0) return null

                          return (
                            <div key={key}>
                              <h4 className="text-md font-medium mb-2 flex items-center">
                                {value.title}
                                {value.autoGenerated && (
                                  <Badge variant="outline" className="ml-2 text-blue-500 border-blue-500">
                                    Auto-generated
                                  </Badge>
                                )}
                              </h4>

                              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                                {docs.map((doc: any) => (
                                  <Card key={doc.id} className="flex flex-col">
                                    <CardHeader className="pb-2">
                                      <CardTitle className="text-sm font-medium">{doc.name}</CardTitle>
                                      <CardDescription>
                                        {doc.autoGenerated
                                          ? `Auto-generated on ${formatDate(doc.uploadDate)} • ${doc.size}`
                                          : `Uploaded by contractor on ${formatDate(doc.uploadDate)} • ${doc.size}`}
                                      </CardDescription>
                                    </CardHeader>
                                    <CardContent className="flex-grow">
                                      <div className="flex items-center justify-between">
                                        <div className="flex items-center gap-2">
                                          <Badge variant="outline">{doc.type}</Badge>
                                          {doc.autoGenerated && doc.material && (
                                            <Badge variant="secondary" className="text-xs">
                                              {doc.material}
                                            </Badge>
                                          )}
                                          {doc.uploadedBy === "contractor" && (
                                            <Badge variant="secondary" className="text-xs">
                                              <Hammer className="h-3 w-3 mr-1" />
                                              Contractor
                                            </Badge>
                                          )}
                                        </div>
                                        <Button variant="ghost" size="icon">
                                          <Download className="h-4 w-4" />
                                        </Button>
                                      </div>
                                    </CardContent>
                                  </Card>
                                ))}
                              </div>
                            </div>
                          )
                        })}
                    </div>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="notes" className="space-y-6">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <div>
                <CardTitle>Project Notes</CardTitle>
                <CardDescription>Important notes and updates about the project</CardDescription>
              </div>
              <Button>
                <Plus className="mr-2 h-4 w-4" /> Add Note
              </Button>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {project.notes.map((note) => (
                  <Card key={note.id}>
                    <CardHeader className="pb-2">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-2">
                          <div className="h-8 w-8 rounded-full bg-primary flex items-center justify-center text-primary-foreground">
                            {note.author.charAt(0)}
                          </div>
                          <div>
                            <CardTitle className="text-sm font-medium">{note.author}</CardTitle>
                            <CardDescription>{formatDate(note.date)}</CardDescription>
                          </div>
                        </div>
                        <Badge variant="outline">
                          <User className="h-3 w-3 mr-1" />
                          Contractor
                        </Badge>
                      </div>
                    </CardHeader>
                    <CardContent>
                      <p className="text-sm">{note.content}</p>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}

